name: Build and Distribute

on:
  push:
    branches:
      - main

jobs:
  build:
    name: build
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.27.3'
    
      - name: Setup Flutter Environment
        run: |
          flutter clean
          flutter pub get 
      
      # 清除 Xcode 缓存
      - name: Clean Xcode Cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Developer/Xcode/iOS\ DeviceSupport
          rm -rf ~/Library/Developer/Xcode/Archives
          rm -rf ~/Library/Developer/Xcode/Products

      # 添加 Xcode 版本选择
      - name: Select Xcode 16.2
        run: sudo xcode-select -s /Applications/Xcode_16.2.app

      # 设置 CocoaPods
      # - name: Setup CocoaPods
      #   run: |
      #     cd ios
      #     rm -rf Pods
      #     rm -f Podfile.lock
      #     pod install --repo-update
          
      # 添加详细的环境信息调试步骤
      - name: Print Environment Info
        run: |
          echo "============= Environment Variables ============="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          FLUTTER_ROOT=$(which flutter | xargs dirname | xargs dirname)
          echo "FLUTTER_ROOT: $FLUTTER_ROOT"
          echo "FLUTTER_APPLICATION_PATH: $GITHUB_WORKSPACE"
          echo "Current Directory: $(pwd)"


      - uses: cedvdb/action-flutter-build-ios@v1
        with:
          build-cmd: |
            flutter build ipa --release --export-options-plist=ios/ExportOptions.plist --no-tree-shake-icons
          certificate-base64: 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

          certificate-password: 111111
          
          provisioning-profile-base64: 


          keychain-password: 111111

      # # 添加检查步骤
      - name: 检查构建文件
        run: |
          echo "检查 build/ios/ipa 目录内容："
          ls -la build/ios/ipa/
          echo "检查 build/ios 目录内容："
          ls -la build/ios/

      - name: Archive IPA
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa

          
      # - name: Upload using iTMSTransporter
      #   env:
      #     WORKING_DIRECTORY: build/ios/ipa
      #     IPA_FILE_NAME: oiyo.ipa
      #     APPLE_USERNAME: Nina2000HH@outlook.com
      #     APPLE_PASSWORD: zeqo-kyio-mlkw-kbwf
      #     APPLE_ASC_PROVIDER: 798RL7J5U7
      #   run: |
      #     cd $WORKING_DIRECTORY
      #     git clone https://github.com/ZhangLi1984/itsm.git
      #     ./itsm/bin/iTMSTransporter -assetFile $IPA_FILE_NAME -u $APPLE_USERNAME -p $APPLE_PASSWORD -m upload -asc_provider $APPLE_ASC_PROVIDER -v verbose

      - name: Upload to App Store using altool
        env:
          IPA_PATH: "build/ios/ipa/plee.ipa"
          APPLE_ID: "applestar34@outlook.com"
          APP_SPECIFIC_PASSWORD: "qsca-kskr-fmeu-gevl"
        run: |
          xcrun altool --upload-app -f "$IPA_PATH" \
            -t ios \
            -u "$APPLE_ID" \
            -p "$APP_SPECIFIC_PASSWORD" \
            --verbose
